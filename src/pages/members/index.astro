---
// © 2024 Functional Software, Inc. dba Sentry
// © 2024 Vlad-Stefan Harbuz <vlad@vlad.website>
// SPDX-License-Identifier: Apache-2.0

import Blob from "../../components/Blob.astro";
import Button from "../../components/Button.astro";
import Layout from "../../layouts/Layout.astro";
import GridMemberList from "../../components/GridMemberList.astro";
import TabularMemberList from "../../components/TabularMemberList.astro";
import MiniMemberList from "../../components/MiniMemberList.astro";
import TotalTally from "../../components/TotalTally.astro";

import svgGrid from '../../assets/icons/grid.svg?raw';
import svgList from '../../assets/icons/list.svg?raw';

import { getMembers } from '../../members/common.ts';

const activeMembers = getMembers();
const inactiveMembers = getMembers({ onlyInactive: true });
---

<Layout title="Members">
  <div class="member-list-container" data-mode="grid">
    <div class="edge-blobs">
      <Blob kind="grad-dots-01" top="8%" right="-2rem"></Blob>
      <Blob kind="solid-fill-03" top="65%" left="-10rem"></Blob>
    </div>
    <div class="container">
      <Blob kind="solid-fill-04" top="-15%" left="-16rem"></Blob>
      <Blob kind="solid-fill-02" top="2%" right="-22rem"></Blob>
      <Blob kind="grad-dots-02" top="30%" left="-20rem"></Blob>
      <Blob kind="grad-dots-03" top="60%" right="-20rem"></Blob>

      <main id="main-content">
        <section>
          <div class="text-center">
            <h1>Member<br>Companies</h1>
          </div>
          <TotalTally />

          <div class="controls">
            <div>
              Sort by
              <select class="select sort-selector" autocomplete="off">
                <option value="ndevs/desc">most devs</option>
                <option value="ndevs/asc">fewest devs</option>
                <option value="joinDate/desc">joined most recently</option>
                <option value="joinDate/asc">joined longest ago</option>
              </select>
            </div>
            <div class="button-group">
              <button class="button button--small tabular-trigger">
                <div class="icon icon--stroked">
                  <Fragment set:html={svgList} />
                </div>
              </button>
              <button class="button button--small grid-trigger">
                <div class="icon icon--stroked">
                  <Fragment set:html={svgGrid} />
                </div>
              </button>
            </div>
          </div>

          <TabularMemberList members={activeMembers}></TabularMemberList>
          <GridMemberList members={activeMembers}></GridMemberList>
        </section>

        <section>
          <h3>Former Member Companies</h3>
          <MiniMemberList members={inactiveMembers}></MiniMemberList>
        </section>

        <section class="flex-center bottom-cta">
          <div>
            <div class="text-center">
              <h2>Join the list</h2>
            </div>

            <div class="text-center">
              <Button href="/join"
                >Learn what it takes</TextButton
              >
            </div>
          </div>
        </section>
      </main>
    </div>
  </div>
</Layout>

<style>
  .controls {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 1rem 0;
    @media (max-width: 500px) {
      justify-content: center;
      align-items: flex-end;
      flex-direction: column-reverse;
    }
  }
  .member-list-container[data-mode='grid'] {
    .tabular-member-list {
      display: none;
    }
  }
  .member-list-container[data-mode='tabular'] {
    .grid-member-list {
      display: none;
    }
  }
  .member-list-container[data-mode='tabular'] .tabular-trigger,
  .member-list-container[data-mode='grid'] .grid-trigger {
    background: var(--color-primary);
    .icon.icon--stroked svg {
      path, rect {
        stroke: black;
      }
    }
    .icon.icon--filled svg {
      path, rect {
        fill: black;
      }
    }
  }
</style>

<script>
  function sortMembers($memberContainer: Element, sortBy: string) {
    function sort($a: Element, $b: Element) {
      if (!($a instanceof HTMLElement) || !($b instanceof HTMLElement)) {
        return 0;
      }
      const aNDevsStr = $a.dataset.ndevs;
      const bNDevsStr = $b.dataset.ndevs;
      const aJoinDate = $a.dataset.joinDate;
      const bJoinDate = $b.dataset.joinDate;
      const aName = $a.dataset.name;
      const bName = $b.dataset.name;
      if (
        aNDevsStr == undefined || bNDevsStr == undefined ||
        aJoinDate == undefined || bJoinDate == undefined ||
        aName == undefined || bName == undefined
      ) {
        return 0;
      }
      const aNDevs = +aNDevsStr;
      const bNDevs = +bNDevsStr;

      let diff = 0;
      if (sortBy == 'ndevs/desc') {
        diff = bNDevs - aNDevs;
      } else if (sortBy == 'ndevs/asc') {
        diff = aNDevs - bNDevs;
      } else if (sortBy == 'joinDate/desc') {
        diff = bJoinDate.localeCompare(aJoinDate);
      } else if (sortBy == 'joinDate/asc') {
        diff = aJoinDate.localeCompare(bJoinDate);
      }
      if (diff == 0) {
        diff = aName.localeCompare(bName);
      }

      return diff;
    }

    const $members = Array.from($memberContainer.querySelectorAll('.member'));
    const $sortedMembers = $members.sort(sort);

    $sortedMembers.forEach(($member) => {
      $memberContainer.appendChild($member);
    });
  }

  const $listContainer = document.querySelector('.member-list-container');

  if ($listContainer) {
    const $tabularTriggers = $listContainer.querySelectorAll('.tabular-trigger');
    const $gridTriggers = $listContainer.querySelectorAll('.grid-trigger');
    const $sortSelector = $listContainer.querySelectorAll('.sort-selector');

    $tabularTriggers.forEach(($trigger) => {
      $trigger.addEventListener('click', () => {
        $listContainer.setAttribute('data-mode', 'tabular');
      });
    });

    $gridTriggers.forEach(($trigger) => {
      $trigger.addEventListener('click', () => {
        $listContainer.setAttribute('data-mode', 'grid');
      });
    });

    $sortSelector.forEach(($selector) => {
      $selector.addEventListener('change', () => {
        const $memberContainers = $listContainer.querySelectorAll('.members');
        $memberContainers.forEach(($memberContainer) => {
          sortMembers($memberContainer, ($selector as HTMLSelectElement).value);
        });
      });
    });
  }
</script>
